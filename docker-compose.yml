version: '3.8'

networks:
  docker_private:
    name: docker_private_${NETWORK_NAME}
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${SUBNET}
          gateway: ${GATEWAY}

volumes:
  mariadb-volume:
    driver: local
  redis-cache:
    driver: local
  redis-queue:
    driver: local
  sonarqube:
    driver: local
  sonarqube-scanner:
    driver: local
  sonarqube-extensions:
    driver: local
  sonarqube-logs:
    driver: local
  postgresql:
    driver: local
  postgresql_data:
    driver: local

services:

  nginx-balancer:
    build:
      context: .
      dockerfile: Docker/Dockerfile.nginx
      args:
        DOMAIN: ${PROJECT_DOMAIN}
    container_name: nginx-${CONTAINER_PREFIX_NAME}
    restart: always
    dns: ${DNS}
    environment:
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx
      DOMAIN: ${PROJECT_DOMAIN}
      SERVER_FPM: ${COMPOSE_PROJECT_NAME}-php-fpm
      SERVER_FPM_PORT: 9000
      SERVER_ROOT: /var/www/public
    networks:
      docker_private:
        ipv4_address: ${IP_PREFIX}.10
    ports:
      - '80:80'
      - '443:443'
    command: /bin/sh -c "envsubst '$$DOMAIN $$SERVER_FPM $$SERVER_FPM_PORT $$SERVER_ROOT' <  /etc/nginx/templates/default.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    volumes:
      - ./App:/var/www
      - ./Docker/nginx/default.conf:/etc/nginx/templates/default.template
      - ./Docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./Docker/nginx/snipets/:/etc/nginx/conf.d/snipets/
      - ./Docker/Logs/nginx:/var/log/nginx
      - ./Docker/ssl/:/etc/certbot/:ro
      # - ./Docker/ssl/conf/:/etc/nginx/ssl/:ro
    depends_on:
      - php-fpm
    links:
      - php-fpm
    healthcheck:
      test: "curl --fail http://${PROJECT_DOMAIN} || exit 1"
      interval: 30s
      timeout: 5s
      retries: 5
    labels:
      com.example.description: "Nginx Web server to balance PHP and static content"

  mariadb-server:
    image: mariadb:latest
    environment:
      MARIADB_USER: ${MARIADB_USER}
      MARIADB_PASSWORD: ${MARIADB_ROOT_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
      MARIADB_DATABASE: ${MARIADB_DATABASE}
    container_name: mariadb-${CONTAINER_PREFIX_NAME}
    restart: always
    dns: ${DNS}
    networks:
      docker_private:
        ipv4_address: ${IP_PREFIX}.11
    ports:
      - 3306
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mysqladmin ping -u ${MARIADB_USER} -P 3306 -p${MARIADB_ROOT_PASSWORD} | grep 'mysqld is alive' || exit 1"
        ]
      interval: 10s
      retries: 15
    volumes:
      - mariadb-volume:/var/lib/mysql/
    labels:
      com.example.description: "Database container"

  node-js:
    container_name: node-${CONTAINER_PREFIX_NAME}
    build:
      context: .
      dockerfile: Docker/Dockerfile.node
      args:
        NODE_ENV: development
        NODEVERSION: 16
        USERUID: ${UID}
        USERGID: ${GID}
        USERNAME: ${USER}
    user: $UID:$GID
    working_dir: /opt
    volumes:
      - './${PROJECT_FOLDER}:/opt'
    dns: ${DNS}
    networks:
      docker_private:
        ipv4_address: ${IP_PREFIX}.12

  php-fpm:
    deploy:
      mode: replicated
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    build:
      context: .
      dockerfile: Docker/Dockerfile.php
      args:
        PHPVERSION: ${PHPVERSION}
        USERUID: ${UID}
        USERGID: ${GID}
        USERNAME: ${USER}
    user: $UID:$GID
    tty: true
    restart: always
    working_dir: /var/www/
    networks:
      - docker_private
    links:
      - mariadb-server
      - redis-cache
      - redis-queue
    depends_on:
      mariadb-server:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
      redis-queue:
        condition: service_healthy
    volumes:
      - ./${PROJECT_FOLDER}:/var/www
    healthcheck:
      test: "curl --fail nginx-balancer/fpm-ping || exit 1"
      interval: 5s
      timeout: 1s
      retries: 3
    labels:
      com.example.description: "PHP fpm server"

  php-composer:
    container_name: composer-${CONTAINER_PREFIX_NAME}
    build:
      context: .
      dockerfile: Docker/Dockerfile.composer
      args:
        PHPVERSION: ${PHPVERSION}
        USERUID: ${UID}
        USERGID: ${GID}
        USERNAME: ${USER}
    user: $UID:$GID
    working_dir: /var/www/
    networks:
      - docker_private
    links:
      - mariadb-server
      - redis-cache
      - redis-queue
    volumes:
      - ./${PROJECT_FOLDER}:/var/www
    labels:
      com.example.description: "PHP composer container"

  php-supervisord:
    container_name: supervisord-${CONTAINER_PREFIX_NAME}
    build:
      context: .
      dockerfile: Docker/Dockerfile.supervisord
      args:
        INSTALLSUPERVISORD: true
        USERUID: ${UID}
        USERGID: ${GID}
        USERNAME: ${USER}
    working_dir: /var/www/
    ports:
      - '9001:9001'
    networks:
      - docker_private
    links:
      - mariadb-server
      - redis-cache
      - redis-queue
    volumes:
      - ./${PROJECT_FOLDER}:/var/www
    labels:
      com.example.description: "PHP composer container"

  redis-cache:
    container_name: redis-cache-${CONTAINER_PREFIX_NAME}
    image: redis:6.2-alpine
    restart: always
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    ports:
      - '6379'
    dns: ${DNS}
    networks:
      docker_private:
        ipv4_address: ${IP_PREFIX}.13
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "redis-cli -a '${REDIS_PASSWORD}' ping | grep PONG"
        ]
      interval: 10s
      timeout: 3s
      retries: 5
    volumes:
      - redis-cache:/data

  redis-queue:
    container_name: redis-queue-${CONTAINER_PREFIX_NAME}
    image: redis:6.2-alpine
    restart: always
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379"
    dns: ${DNS}
    networks:
      docker_private:
        ipv4_address: ${IP_PREFIX}.14
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "redis-cli -a '${REDIS_PASSWORD}' ping | grep PONG"
        ]
      interval: 10s
      timeout: 3s
      retries: 5
    volumes:
      - redis-queue:/data

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./Docker/ssl/:/etc/certbot/:rw
      - ./Docker/ssl/conf/:/etc/letsencrypt/:rw
    networks:
      - docker_private
    labels:
      com.example.description: "Generate a SSL cert for your domain"

  autoheal:
    image: willfarrell/autoheal:latest
    tty: true
    container_name: autoheal
    restart: always
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
      - AUTOHEAL_INTERVAL=5 # check every 5 seconds
      - AUTOHEAL_START_PERIOD=30 # wait 0 seconds before first health check
      - AUTOHEAL_DEFAULT_STOP_TIMEOUT=10 # Docker waits max 10 seconds (the Docker default) for a container to stop before killing during restarts (container overridable via label, see below)
      - DOCKER_SOCK=/var/run/docker.sock # Unix socket for curl requests to Docker API
      - CURL_TIMEOUT=30 # --max-time seconds for curl requests to Docker API
    networks:
      - docker_private
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      com.example.description: "Auto restart unhealthy containers"
